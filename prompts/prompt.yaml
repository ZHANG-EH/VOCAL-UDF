dsl_definition: |
  Each video segment is a sequence of N frames. The visual content of each frame is represented by a region graph: A region graph contains a set of objects in a frame, along with a set of relationships between those objects. Objects can optionally have attributes. In our DSL, we use a variable o to represent an object in a query. Different variables represent different objects. All predicates of a region graph are connected by commas. Then, region graphs are connected in temporal sequence with semicolons. Region graphs that appear earlier in the sequence represent temporally earlier frames in the video. We further use the notation Duration(g, d) to require that the region graph g exist in at least d consecutive frames. Negation operation is not supported in our DSL. Remember to always add parentheses around comma-connected predicates. Assume the video segments capture 25 frames per second.
dsl_definition_image: |
  The visual content of the image is represented by a region graph: A region graph contains a set of objects in an image, along with a set of relationships between those objects. Objects can optionally have attributes. In our DSL, we use a variable o to represent an object in a query. Different variables represent different objects. Negation operation is not supported in our DSL. All predicates of a region graph are connected by commas.
udf_definition:
  with_object: |
    A function can take one of the following three formats, depending on if it is an object predicate, a relationship predicate, or an attribute predicate:
    - object predicate: objec(o0, oname). For example, object(o0, 'car') checks whether o0 is a car.
    - relationship predicate: relationshipName(o0, o1). For example, left_of(o0, o1) checks whether o0 is on the left of o1.
    - attribute predicate: key_value(o0). For example, color_red(o0) checks whether the color of o0 is red.
  without_object: |
    A function can take one of the following three formats, depending on if it is a relationship predicate or an attribute predicate:
    - relationship predicate: relationshipName(o0, o1). For example, left_of(o0, o1) checks whether o0 is on the left of o1.
    - attribute predicate: key_value(o0). For example, color_red(o0) checks whether the color of o0 is red.
registered_udfs: |
  You have access to the following functions:
  {{functions}}
parse_query: |
  For text-to-DSL translation tasks, only use the functions you have been provided with. Reply PARSE_YES when the text is successfully translated into the DSL and verified by the provided function, or PARSE_NO if parsing the user input requires new predicates that are not listed in the current functions list. The predicates MUST be selected from the provided functions.
force_parse_query: |
  For text-to-DSL translation tasks, only use the functions you have been provided with. Reply TERMINATE when the text is successfully translated into the DSL and verified by the provided function. The predicates MUST be selected from the provided functions. Think step by step to resolve the user's request. If you think the user's request cannot be resolved using the provided functions, try your best to translate it into the DSL that best approximates the user's intent.
propose_udfs: |
  For function proposal tasks, only use the functions you have been provided with. Reply TERMINATE when the task is done. Please propose the new functions that are necessary to parse the user query, and also include a brief description for each proposed function that explains its purpose as described in the query. The function description should always start with the word ``Whether'' and not contain other comments, explanations, or reasoning.
  Let's think step by step. Based on the existing functions, determine what new functions are needed. The proposed function must follow the format. Don't propose functions that contain changes in states. If you have those, propose a separate function for each state instead. For example, do not propose a function merge_from_A_into_B(o0) that checks whether an object o0 merges from lane A to lane B because it contains two states: o0 is in lane A and o0 is in lane B. Instead, replace it with two separate functions: in_lane_A(o0) and in_lane_B(o0). Propose as few functions as possible while ensuring that the user's intent can be precisely captured.
verify_udfs: |
  You are a helpful AI assistant that determines whether a function can be constructed out of existing ones.
  Here are the existing functions:
  {{functions}}
  For each proposed function, determine if it is already covered or can be constructed out of existing functions. If so, remove it from the list. Do not use any assumptions that are not explicitly stated. Output the remaining functions in a strict JSON format (if there is nothing left, please reply empty JSON):
  ```json
  {"function(args)": "description"}
  ```
decide_udf_type:
  overall: |
    You are tasked with creating a solution to determine ``{{udf_description}}''. You can choose to use either a python function or a computer vision model.
  code_without_pixels: |
    1. Python function: This approach is suitable for tasks that can be determined based on any of the following:
        - Existing concepts of objects. You can only leverage concepts from the following predefined list: {{available_concepts}}. These concepts are pre-extracted for each object in the image. Concepts not listed are not available.
        - Bounding box coordinates of objects.
        - However, you cannot utilize pixel values in the image for this task.
  code_with_pixels: |
    1. Python function: This approach is suitable for tasks that can be determined based on any of the following:
        - Existing concepts of objects. You can only leverage concepts from the following predefined list: {{available_concepts}}. These concepts are pre-extracted for each object in the image. Concepts not listed are not available.
        - Bounding box coordinates of objects.
        - Statistical analysis of pixel values in the image using computer vision libraries.
  code_with_pixels_and_pretrained_models: |
    1. Python function: This approach is suitable for tasks that can be determined based on any of the following:
        - Existing concepts of objects. You can only leverage concepts from the following predefined list: {{available_concepts}}. These concepts are pre-extracted for each object in the image. Concepts not listed are not available.
        - Bounding box coordinates of objects.
        - Statistical analysis of pixel values in the image using computer vision libraries.
        - Predefined models for image captioning, visual question answering, and depth estimation.
  model: |
    2. Computer vision model: This approach is suitable for tasks that require understanding the visual content and contextual interpretation of the image.
  output: |
    Please specify your choice by responding with 'programUDF' to use the Python function or 'modelUDF' to use the computer vision model. Choose the approach that you believe will achieve the highest accuracy for the task. Consider only the effectiveness of each approach without concern for computational resources, time, or other constraints. Please respond with the answer only, and do not output any other responses or any explanations.
generate_udfs:
  overall: |
    Generate {{num_interpretations}} Python functions with different, diverse semantic interpretations for the following Python task. Each generation should include the semantic interpretation and the Python function implementation, formatted as a dictionary. The response should strictly adhere to the formats described below:
  task: |
    - Task: Write a python function called `py_{{udf_signature}}` that determines ``{{udf_description}}''.
  details: |
    - Each interpretation should offer a different but reasonable understanding of the task, not just superficial differences like variable names. Seek interpretations that vary in logic and conceptual understanding of the task. Consider geometric, visual, and spatial perspectives. Include assumptions or constraints where relevant.
    - Prioritize generating functions that are likely to see frequent use, starting with the most common.
  semantic_interpretation: | # Unused
    - Semantic interpretation: {{semantic_interpretation}}
  schema: | # Unused
    - {{schema_info}}
  inputs:
    attribute: |
      - The input to the function contains the following parameters:
          - {{o1}}_oname: str. The class name of the object.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_anames: List[str]. The list of attribute names of the object.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
      - The function should return a boolean value, indicating whether the attribute of the object is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
    relationship: |
      - The input to the function contains the following parameters:
          - {{o1}}_oname: str. The class name of object {{o1}}.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_anames: List[str]. The list of attribute names of object {{o1}}.
          - {{o2}}_oname: str. The class name of object {{o2}}.
          - {{o2}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_anames: List[str]. The list of attribute names of object {{o2}}.
          - {{o1}}_{{o2}}_rnames: List[str]. The list of relationship names between object {{o1}} and object {{o2}}, where object {{o1}} is the subject and object {{o2}} is the target.
          - {{o2}}_{{o1}}_rnames: List[str]. The list of relationship names between object {{o2}} and object {{o1}}, where object {{o2}} is the subject and object {{o1}} is the target.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
      - The function should return a boolean value, indicating whether the relationship between the two objects is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - Available relationship names: {{relationship_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
  inputs_with_pixels:
    attribute: |
      - The input to the function contains the following parameters:
          - img: np.ndarray of shape (H, W, C). The image is in the RGB color space, where H is the height, W is the width, and C is the number of channels.
          - {{o1}}_oname: str. The class name of the object.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_anames: List[str]. The list of attribute names of the object.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
      - The function should return a boolean value, indicating whether the attribute of the object is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
      - You can use any python packages you want. You do not need to install but only import them before using. You can not use supervised-learning method as there is no training data. Though, you can use frozen models if you want.
    relationship: |
      - The input to the function contains the following parameters:
          - img: np.ndarray of shape (H, W, C). The image is in the RGB color space, where H is the height, W is the width, and C is the number of channels.
          - {{o1}}_oname: str. The class name of object {{o1}}.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_anames: List[str]. The list of attribute names of object {{o1}}.
          - {{o2}}_oname: str. The class name of object {{o2}}.
          - {{o2}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_anames: List[str]. The list of attribute names of object {{o2}}.
          - {{o1}}_{{o2}}_rnames: List[str]. The list of relationship names between object {{o1}} and object {{o2}}, where object {{o1}} is the subject and object {{o2}} is the target.
          - {{o2}}_{{o1}}_rnames: List[str]. The list of relationship names between object {{o2}} and object {{o1}}, where object {{o2}} is the subject and object {{o1}} is the target.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
      - The function should return a boolean value, indicating whether the relationship between the two objects is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - Available relationship names: {{relationship_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
      - You can use any python packages you want. You do not need to install but only import them before using. You can not use supervised-learning method as there is no training data. Though, you can use frozen models if you want.
  inputs_with_optional_kwargs:
    attribute: |
      - The input to the function contains the following parameters:
          - {{o1}}_oname: str. The class name of the object.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_anames: List[str]. The list of attribute names of the object.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
          - **kwargs: Optional numeric parameters that can be adjusted as needed.
      - The function should return a boolean value, indicating whether the attribute of the object is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
      - Include `**kwargs` in the function's arguments only if necessary. Only arguments of numeric data types are allowed in `**kwargs`. String, boolean, or object data types are not allowed in `**kwargs`.
    relationship: |
      - The input to the function contains the following parameters:
          - {{o1}}_oname: str. The class name of object {{o1}}.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_anames: List[str]. The list of attribute names of object {{o1}}.
          - {{o2}}_oname: str. The class name of object {{o2}}.
          - {{o2}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_anames: List[str]. The list of attribute names of object {{o2}}.
          - {{o1}}_{{o2}}_rnames: List[str]. The list of relationship names between object {{o1}} and object {{o2}}, where object {{o1}} is the subject and object {{o2}} is the target.
          - {{o2}}_{{o1}}_rnames: List[str]. The list of relationship names between object {{o2}} and object {{o1}}, where object {{o2}} is the subject and object {{o1}} is the target.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
          - **kwargs: Optional numeric parameters that can be adjusted as needed.
      - The function should return a boolean value, indicating whether the relationship between the two objects is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - Available relationship names: {{relationship_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
      - Include `**kwargs` in the function's arguments only if necessary. Only arguments of numeric data types are allowed in `**kwargs`. String, boolean, or object data types are not allowed in `**kwargs`.
  inputs_with_pixels_and_optional_kwargs:
    attribute: |
      - The input to the function contains the following parameters:
          - img: np.ndarray of shape (H, W, C). The image is in the RGB color space, where H is the height, W is the width, and C is the number of channels.
          - {{o1}}_oname: str. The class name of the object.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of the object.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of the object.
          - {{o1}}_anames: List[str]. The list of attribute names of the object.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
          - **kwargs: Optional numeric parameters that can be adjusted as needed.
      - The function should return a boolean value, indicating whether the attribute of the object is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
      - Include `**kwargs` in the function's arguments only if necessary. Only arguments of numeric data types are allowed in `**kwargs`. String, boolean, or object data types are not allowed in `**kwargs`.
      - You can use any python packages you want. You do not need to install but only import them before using. You can not use supervised-learning method as there is no training data. Though, you can use frozen models if you want.
    relationship: |
      - The input to the function contains the following parameters:
          - img: np.ndarray of shape (H, W, C). The image is in the RGB color space, where H is the height, W is the width, and C is the number of channels.
          - {{o1}}_oname: str. The class name of object {{o1}}.
          - {{o1}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o1}}.
          - {{o1}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o1}}.
          - {{o1}}_anames: List[str]. The list of attribute names of object {{o1}}.
          - {{o2}}_oname: str. The class name of object {{o2}}.
          - {{o2}}_x1: int. The x-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_y1: int. The y-coordinate of the top-left corner of the bounding box of object {{o2}}.
          - {{o2}}_x2: int. The x-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_y2: int. The y-coordinate of the bottom-right corner of the bounding box of object {{o2}}.
          - {{o2}}_anames: List[str]. The list of attribute names of object {{o2}}.
          - {{o1}}_{{o2}}_rnames: List[str]. The list of relationship names between object {{o1}} and object {{o2}}, where object {{o1}} is the subject and object {{o2}} is the target.
          - {{o2}}_{{o1}}_rnames: List[str]. The list of relationship names between object {{o2}} and object {{o1}}, where object {{o2}} is the subject and object {{o1}} is the target.
          - height: int. The height of the frame.
          - width: int. The width of the frame.
          - **kwargs: Optional numeric parameters that can be adjusted as needed.
      - The function should return a boolean value, indicating whether the relationship between the two objects is true or false.
      - Available object names: {{object_domain}}
      - Available attribute names: {{attribute_domain}}
      - Available relationship names: {{relationship_domain}}
      - The origin (x, y) = (0, 0) is located at the top left corner. The x axis is oriented from left to right; the y axis is oriented from top to bottom.
      - Include `**kwargs` in the function's arguments only if necessary. Only arguments of numeric data types are allowed in `**kwargs`. String, boolean, or object data types are not allowed in `**kwargs`.
      - You can use any python packages you want. You do not need to install but only import them before using. You can not use supervised-learning method as there is no training data. Though, you can use frozen models if you want.
  pretrained_model_list: |
      - You also have access to the following functions to use in your implementation (use them only when needed):
          - image_captioning(image: np.ndarray) -> str: It takes an image in NumPy array with shape (H, W, C) and generates a text caption of the image. The image is in the RGB color space, and H is the height, W is the width, and C is the number of channels.
          - visual_question_answering(image: np.ndarray, question: str) -> str: It takes an image in NumPy array with shape (H, W, C) and a question about the image, and generates an answer to the question. The image is in the RGB color space, and H is the height, W is the width, and C is the number of channels.
          - depth_estimation(image: np.ndarray) -> np.ndarray: It takes an image in NumPy array with shape (H, W, C) and generates a depth map of the image. The image is in the RGB color space, and H is the height, W is the width, and C is the number of channels.
  comments: |
    - The function should only contain the implementation itself, with no other comments, inline comments, syntax highlighter, explanations, reasoning, or dialogue.
  output: |
    - Use the following output format:
      ```json
      {"answer": [
          {"semantic_interpretation": "interpretation", "function_implementation": "def py_{{udf_signature}}:\n    # Your code here"},
          {"semantic_interpretation": "interpretation", "function_implementation": "def py_{{udf_signature}}:\n    # Your code here"},
          ...
      ]}
      ```
  output_with_optional_kwargs: |
    - Use the following output format:
    ```json
    {
      "answer": [
        {
          "semantic_interpretation": "interpretation",
          "function_implementation": "def py_{{udf_signature}}:\n    # Your code here",
          "kwargs": {
            "arg_name1": {"min": minimum_value, "max": maximum_value, "default": default_value},
            // Add more arguments as needed.
          },
        },
        // Add more functions as needed.
      ]
    }
    ```
  output_one_implementation: |
    - Use the following output format:
    ```json
    {"semantic_interpretation": "interpretation", "function_implementation": "def py_{{udf_signature}}:\n    # Your code here"}
    ```
  output_one_implementation_with_optional_kwargs: |
    - Use the following output format:
    ```json
    {
      "semantic_interpretation": "interpretation",
      "function_implementation": "def py_{{udf_signature}}:\n    # Your code here",
      "kwargs": {
        "arg_name1": {"min": minimum_value, "max": maximum_value, "default": default_value},
        // Add more arguments as needed.
      }
    }
    ```
filter_training_data: |
  Given a list of object classes: {{object_classes}}, and a function "{{udf_signature}}" that determines "{{udf_description}}", assume that objects are chosen from the object classes listed above. Your task is to identify and list all object classes that can possibly be involved in this concept. It's LIFE THREATENING not to remove object classes that can possibly be involved in this concept. Please format your answer in the JSON format shown below:
  ```json
  {"answer": [
    "object_class1",
    "object_class2",
    // Add more object classes as needed.
  ]}
  ```
model:
  generate_description: |
    You are given a visual concept name.

    Follow these steps:
    <step1>You have to work as an expert
        linguist. There are some human
        annotators who need to determine
        if given images are in-scope or
        out-of-scope for this visual
        concept. Your task is to generate
        description of the visual
        concept which annotators can use
        to decide if any images are in-
        scope or out-of-scope for the
        given visual concept.</step1>
    <step2>Provide an concept definition of
        this visual image in a few
        sentences.</step2>
    <step3>Provide all the image attributes
        that an image must have in order
        to be in-scope for this visual
        concept.</step3>
    <step4>Each attribute found in step2
        and step3 should be verbose,
        independent, self-explanatory and
        meaningful.</step4>
    <step7>Write your response in following
        user friendly and readable
        format:
    Visual concept definition:
    <Add 2-3 line concept definition of the
        visual concept here.>
    Image must have following attributes
        for it to be in-scope for this
        visual concept:
    <Add details here as bullet points.>
    </step7>
    <visualConceptName>{{concept_name}}</
        visualConceptName>

deprecated:
  verify_udfs: | # Unused
    The proposed functions are { {{proposed_functions}} }.
  generate_semantic_interpretation: | # Support kwargs
    Generate {{num_interpretations}} different, diverse semantic interpretations for the following Python task, formatted as a numbered list. Each interpretation should offer a different but reasonable understanding of the task, not just superficial differences like variable names. Ensure that each version is separated by a line break.

    Task: determine {{udf_description}}. {{schema_info}}. Input includes {{obj_dictionary_str}} and optional numeric parameters that can be adjusted as needed (**kwargs). Output is a boolean value.

    Seek interpretations that vary in logic and conceptual understanding of the task. Consider geometric, visual, and spatial perspectives. Include assumptions or constraints where relevant.
  generate_udfs: | # Support kwargs
    Please provide a response consisting of two distinct parts: a Python function block and a JSON configuration block. The response should strictly adhere to the formats described below:

    1. **Python Function Block**:
      - Define a function named `py_{{udf_class}}` that determines {{udf_description}}.
      - Semantic interpretation: {{semantic_interpretation}}
      - Each object is represented by a dictionary of {shape: string, color: string, material: string, x1: float, y1: float, x2: float, y2: float}. Shape can be one of the following: ["cube", "sphere", "cylinder"]. Color can be one of the following: ["gray", "red", "blue", "green", "brown", "cyan", "purple", "yellow"]. Material can be one of the following: ["rubber", "metal"]. x1, y1, x2, y2 are the upper-left and bottom-right coordinates of the bounding box. The coordinates are relative to the top-left corner of a 480x320 frame.
      - The function should take {{n_obj}} as input, along with optional numeric parameters that can be adjusted as needed (`**kwargs`), and return a boolean value.
      - Only number data types are allowed in `**kwargs`. String, boolean, or object data types are not allowed.
      - The script should contain only minimal comments, focusing on explaining only the most complex or crucial parts of the logic. Inline comments are preferred unless block comments are necessary for clarity.
      - Use the following template for the Python function:
        ```python
        def {{udf_header}}:
            # Your code here
        ```

    2. **JSON Configuration Block**:
      - Provide a JSON object describing any additional parameters for the function.
      - For each parameter, specify a reasonable minimum and maximum value.
      - If no additional parameters are required, return an empty JSON object.
      - Use the following template for the JSON block:
        ```json
        {
            # If the function doesn't require any additional parameters, simply returns an empty JSON object
            # For each argument, provide reasonable minimum, maximum, and default values.
            # Don't include any comments in the JSON object
            "arg_name": {"min": minimum_value, "max": maximum_value, "default": default_value}
            # Add additional parameters as needed
        }
        ```

    Ensure that your response contains these two blocks with the correct formats and relevant content as specified.
