[
    {
        "role": "user",
        "content": "Near(o0, o1): Whether o0 is near o1.\nExamples: \no0 = ('sphere', 'brown', 'metal', 193, 55, 225, 85), \no1 = ('cylinder', 'cyan', 'rubber', 202, 77, 238, 122), \no2 = ('sphere', 'cyan', 'rubber', 155, 39, 184, 62),\no3 = ('cylinder', 'cyan', 'rubber', 150, 48, 184, 92),\no4 = ('cube', 'purple', 'metal', 169, 31, 207, 69),\no5 = ('sphere', 'purple', 'metal', 202, 50, 233, 81),\no6 = ('sphere', 'purple', 'metal', 380, 133, 427, 176), \no7 = ('sphere', 'brown', 'rubber', 375, 98, 416, 136),\no8 = ('cube', 'red', 'rubber', 252, 65, 299, 111),\no9 = ('sphere', 'brown', 'metal', 279, 41, 309, 70),\no10 = ('sphere', 'yellow', 'metal', 272 77, 308, 112),\no11 = ('cube', 'blue', 'rubber', 204, 32, 237, 63),\no12 = ('cube', 'purple', 'rubber', 1, 88,  28, 140),\no13 = ('cylinder', 'blue', 'rubber', 241, 82, 280, 128),\no14 = ('cube', 'cyan', 'rubber', 364, 90, 422, 145),\no15 = ('sphere', 'cyan', 'rubber', 256, 87, 294, 124),\n o16 = ('cylinder', 'purple', 'rubber', 161, 47, 194, 87), \n o17 = ('sphere', 'brown', 'rubber', 144, 87, 182, 125), \n o18 = ('cube', 'purple', 'rubber', 177, 28, 214, 64), \n o19 = ('cube', 'purple', 'metal', 335, 56, 376, 97), \nNear(o0, o1) = True,\nNear(o2, o3) = True,\nNear(o4, o5) = True,\nNear(o6, o7) = True,\nNear(o8, o9) = True,\nNear(o10, o11) = False,\nNear(o12, o13) = False,\nNear(o14, o15) = False,\nNear(o16, o17) = False,\nNear(o18, o19) = False"
    },
    {
        "role": "assistant",
        "content": "```sql\nCREATE OR REPLACE FUNCTION pynear (o1_x1 float, o1_y1 float, o1_x2 float, o1_y2 float, o2_x1 float, o2_y1 float, o2_x2 float, o2_y2 float)\n    RETURNS boolean\nAS $$\n    import math\n    # Calculate the center points of both objects\n    cx1 = (o1_x1 + o1_x2) / 2\n    cy1 = (o1_y1 + o1_y2) / 2\n    cx2 = (o2_x1 + o2_x2) / 2\n    cy2 = (o2_y1 + o2_y2) / 2\n\n    # Calculate the distance between the center points, normalized by the average width of the objects\n    distance = math.sqrt(math.pow(cx1 - cx2, 2.0) + math.pow(cy1 - cy2, 2.0)) / ((o1_x2 - o1_x1 + o2_x2 - o2_x1) / 2)\n\n    # Define a threshold for being \"near\"\n    threshold = 1.0\n\n    # Return whether the objects are near each other\n    return distance < threshold\n$$ LANGUAGE plpython3u;\n```"
    }
]